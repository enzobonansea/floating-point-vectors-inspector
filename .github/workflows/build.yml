name: Build and push to ECR

on:
  push:
    branches:
      - main

jobs:
  checkout-code:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout repository (no submodules)
        uses: actions/checkout@v4
        with:
          submodules: false

      # Removed global git config for GitLab submodules

      - name: Set up SSH for GitLab submodules
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GITLAB_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan gitlab.licar.exp.dc.uba.ar >> ~/.ssh/known_hosts

      - name: Manually update submodules
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Make scripts executable
        run: |
          chmod +x build_and_push_ecr.sh
          chmod +x extract_ecr_to_baremetal.sh

      - name: Get generated image tag
        id: get_tag
        run: |
          MAIN_COMMIT=$(git rev-parse --short HEAD)
          PY_COMPRESS_COMMIT=$(git -C py-Compress-Simulator rev-parse --short HEAD 2>/dev/null || echo "no-submodule")
          IMAGE_TAG="fpvi-${MAIN_COMMIT}_pycs-${PY_COMPRESS_COMMIT}"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "main_commit=$MAIN_COMMIT" >> $GITHUB_OUTPUT
          echo "py_compress_commit=$PY_COMPRESS_COMMIT" >> $GITHUB_OUTPUT
          echo "Image tag: $IMAGE_TAG"
          
      - name: Update menu.sh with commit information
        run: |
          MAIN_COMMIT=$(git rev-parse --short HEAD)
          PY_COMPRESS_COMMIT=$(git -C py-Compress-Simulator rev-parse --short HEAD 2>/dev/null || echo "no-submodule")
          
          # Update the placeholders in menu.sh with actual commit values
          sed -i "s/MAIN_COMMIT_PLACEHOLDER/$MAIN_COMMIT/g" menu.sh
          sed -i "s/PY_COMPRESS_COMMIT_PLACEHOLDER/$PY_COMPRESS_COMMIT/g" menu.sh
          
          # Show the updated file for verification
          echo "Updated menu.sh:"
          cat menu.sh
          
      - name: Debug output
        run: |
          echo "Output tag: ${{ steps.get_tag.outputs.tag }}"

      - name: Upload repository and tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-and-tag
          path: |
            .
            !./.git
          retention-days: 1



  build-and-push-image:
    needs: checkout-code
    runs-on: ubuntu-latest
    steps:
      - name: Download code and tag artifact
        uses: actions/download-artifact@v4
        with:
          name: code-and-tag

      - name: Debug and check image tag
        run: |
          echo "Tag from checkout-code: ${{ needs.checkout-code.outputs.tag }}"
          if [ -z "${{ needs.checkout-code.outputs.tag }}" ]; then
            echo "ERROR: Docker image tag is empty. Using default tag..."
            echo "DEFAULT_TAG=fpvi-debug-$(date +%s)" >> $GITHUB_ENV
          else
            echo "TAG=${{ needs.checkout-code.outputs.tag }}" >> $GITHUB_ENV
          fi

      - name: Install or Update AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Download cpu2017 ISO from S3
        run: |
          aws s3 cp s3://floating-point-vectors-inspector/cpu2017-1.1.9.iso cpu2017-1.1.9.iso
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        id: build_push_image
        run: |
          if [ -n "${{ env.DEFAULT_TAG }}" ]; then
            echo "Using default tag: ${{ env.DEFAULT_TAG }}"
            TAG="${{ env.DEFAULT_TAG }}"
          else
            echo "Using checkout tag: ${{ env.TAG }}"
            TAG="${{ env.TAG }}"
          fi
          
          echo "Building Docker image with tag: $TAG"
          docker build -t floating-point-vectors-inspector:$TAG .
          
          echo "Pushing image to ECR with tag: $TAG"
          docker tag floating-point-vectors-inspector:$TAG 764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:$TAG
          docker tag floating-point-vectors-inspector:$TAG 764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:latest
          
          # Push both the version-specific tag and the latest tag
          docker push 764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:$TAG
          docker push 764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:latest
          
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
  notify:
    needs: [checkout-code, build-and-push-image]
    runs-on: ubuntu-latest
    steps:
      - name: Notify about deployment
        run: |
          echo "::notice::Image built and pushed successfully with tag: ${{ needs.checkout-code.outputs.tag }}"
          echo "::notice::To deploy to a baremetal host, use the 'Deploy to EC2' workflow with this tag."