name: CI/CD Pipeline for Floating Point Vectors Inspector

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  checkout-code:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout repository (no submodules)
        uses: actions/checkout@v4
        with:
          submodules: false

      # Removed global git config for GitLab submodules

      - name: Set up SSH for GitLab submodules
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GITLAB_DEPLOY_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan gitlab.licar.exp.dc.uba.ar >> ~/.ssh/known_hosts

      - name: Manually update submodules
        run: |
          git submodule sync
          git submodule update --init --recursive

      - name: Make scripts executable
        run: |
          chmod +x build_and_push_ecr.sh
          chmod +x extract_ecr_to_baremetal.sh

      - name: Get generated image tag
        id: get_tag
        run: |
          MAIN_COMMIT=$(git rev-parse --short HEAD)
          PY_COMPRESS_COMMIT=$(git -C py-Compress-Simulator rev-parse --short HEAD 2>/dev/null || echo "no-submodule")
          IMAGE_TAG="main-${MAIN_COMMIT}_pyc-${PY_COMPRESS_COMMIT}"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Upload repository and tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: code-and-tag
          path: |
            .
            !./.git
          retention-days: 1

  build-image:
    needs: checkout-code
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ needs.checkout-code.outputs.IMAGE_TAG }}
    steps:
      - name: Download code and tag artifact
        uses: actions/download-artifact@v4
        with:
          name: code-and-tag

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Download cpu2017 ISO from S3
        run: |
          aws s3 cp s3://floating-point-vectors-inspector/cpu2017-1.1.9.iso cpu2017-1.1.9.iso
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: eu-north-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t floating-point-vectors-inspector:${{ needs.checkout-code.outputs.IMAGE_TAG }} .

  push-image:
    needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Download code and tag artifact
        uses: actions/download-artifact@v4
        with:
          name: code-and-tag

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Docker image to ECR
        run: |
          docker tag floating-point-vectors-inspector:${{ needs.build-image.outputs.IMAGE_TAG }} 764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:${{ needs.build-image.outputs.IMAGE_TAG }}
          docker push 764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:${{ needs.build-image.outputs.IMAGE_TAG }}

  deploy-image:
    needs: push-image
    runs-on: ubuntu-latest
    steps:
      - name: Download code and tag artifact
        uses: actions/download-artifact@v4
        with:
          name: code-and-tag

      - name: Update ECR_IMAGE in extract_ecr_to_baremetal.sh
        run: |
          sed -i "s|^ECR_IMAGE=.*|ECR_IMAGE=\"764515255972.dkr.ecr.eu-north-1.amazonaws.com/computer-science/floating-point-vectors-inspector:${{ needs.push-image.outputs.IMAGE_TAG }}\"|" extract_ecr_to_baremetal.sh

      - name: Copy deployment script to baremetal host
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.BAREMETAL_HOST }}
          username: ${{ secrets.BAREMETAL_USER }}
          key: ${{ secrets.BAREMETAL_SSH_KEY }}
          port: ${{ secrets.BAREMETAL_PORT }}
          source: "extract_ecr_to_baremetal.sh"
          target: "~/extract_ecr_to_baremetal.sh"

      - name: Run deployment script on baremetal host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BAREMETAL_HOST }}
          username: ${{ secrets.BAREMETAL_USER }}
          key: ${{ secrets.BAREMETAL_SSH_KEY }}
          port: ${{ secrets.BAREMETAL_PORT }}
          script: |
            chmod +x ~/extract_ecr_to_baremetal.sh
            sudo ~/extract_ecr_to_baremetal.sh